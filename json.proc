json_indent_level = 0
json_indent$ = ""

# Write TextGrid tier to JSON file
procedure writeJsonTgTier (.out$, .tier, .last_tier)
	if !numberOfSelected("TextGrid")
		exitScript: "Can't write JSON TextGrid tier of non-TextGrid object"
	endif
	
	.interval = Is interval tier: .tier
	.tier_type$ = if .interval then "IntervalTier" else "TextTier" fi
	.tier_name$ = Get tier name: .tier
	
	.tier_start = Get start time
	.tier_end = Get end time
	
	@startJsonObject(.out$)
	@writeJsonString(.out$, "class", .tier_type$, 0)
	@writeJsonString(.out$, "name", .tier_name$, 0)
	@writeJsonNumber(.out$, "start", .tier_start, 0)
	@writeJsonNumber(.out$, "end", .tier_end, 0)

	.items_name$ = if .interval then "intervals" else "points" fi

	if .interval
		.items = Get number of intervals: .tier
	else
		.items = Get number of points: .tier
	endif
	
	# Empty tier
	if !.items
		if .interval
			# Write empty interval spanning entire tier
			@startJsonList(.out$, .items_name$)
			@writeJsonIntervalWithLabel(.out$, .tier_start, .tier_end, "", 1)
		else
			# Write empty points list
			@writeJsonEmptyList(.out$, .items_name$, 1)
		endif
	else
		@startJsonList(.out$, .items_name$)

		for .i to .items
			.last = if .i = .items then 1 else 0 fi
			if .interval
				.label$ = Get label of interval: .tier, .i
				.start = Get start point: .tier, .i
				.end = Get end point: .tier, .i
				@writeJsonIntervalWithLabel(.out$, .start, .end, .label$, .last)
			else
				.label$ = Get label of point: .tier, .i
				.time = Get time of point: .tier, .i
				@writeJsonPointWithLabel(.out$, .time, .label$, .last)
			endif
		endfor

		@endJsonList(.out$, 1)

	endif

	@endJsonObject(.out$, .last_tier)
endproc

# Write TextGrid interval to JSON file
procedure writeJsonIntervalWithLabel (.out$, .start, .end, .label$, .last)
	@startJsonObject(.out$)
	@writeJsonNumber(.out$, "start", .start, 0)
	@writeJsonNumber(.out$, "end", .end, 0)
	@writeJsonString(.out$, "label", .label$, 1)
	@endJsonObject(.out$, .last)
endproc

# Write [Pitch]Tier Point to JSON file
procedure writeJsonPointWithNumber (.out$, .time, .value, .last)
	@startJsonObject(.out$)
	@writeJsonNumber(.out$, "time", .time, 0)
	@writeJsonNumber(.out$, "value", .value, 1)
	@endJsonObject(.out$, .last)
endproc

# Write TextGrid point to JSON file
procedure writeJsonPointWithLabel (.out$, .time, .label$, .last)
	@startJsonObject(.out$)
	@writeJsonNumber(.out$, "time", .time, 0)
	@writeJsonString(.out$, "label", .label$, 1)
	@endJsonObject(.out$, .last)
endproc

# Append to list in JSON file
procedure pushToJsonList (.out$, .n, .last)
	.e$ = if .last then "" else "," fi
	appendFile(.out$, json_indent$, .n, .e$, n$)
endproc

# Write string attribute to JSON file
procedure writeJsonString (.out$, .name$, .value$, .last)
	.closing$ = if .last then "" else "," fi
	@sanitizeJsonString(.value$)
	.value$ = sanitizeJsonString.str$
	appendFile(.out$,
		...json_indent$, """", .name$, """:", s$, """", .value$, """", .closing$, n$)
endproc

# Write numeric attribute to json file
procedure writeJsonNumber (.out$, .name$, .value, .last)
	.closing$ = if .last then "" else "," fi
	appendFile(.out$,
		...json_indent$, """", .name$, """:", s$, .value, .closing$, n$)
endproc

# Write boolean attribute to JSON file
procedure writeJsonBoolean (.out$, .name$, .value, .last)
	.closing$ = if .last then "" else "," fi
	.value$ = if .value = 1 then "true" else "false" fi
	appendFile(.out$,
		...json_indent$, """", .name$, """:", s$, .value$, .closing$, n$)
endproc

# Write an empty list to JSON file
procedure writeJsonEmptyList (.out$, .name$, .last)
	.closing$ = if .last then "]" else "]," fi
	appendFile(.out$,
	...json_indent$, """", .name$, """:", s$, "[", .closing$, n$)
endproc

# Start a new JSON object
procedure startJsonObject (.out$)
	appendFile(.out$,
		...json_indent$, "{", n$)
	@setJsonIndent(json_indent_level+1)
	json_indent$ = setJsonIndent.indent$
endproc

# End a JSON object
procedure endJsonObject (.out$, .last)
	.closing$ = if .last then "}" else "}," fi
	@setJsonIndent(json_indent_level-1)
	json_indent$ = setJsonIndent.indent$
	appendFile(.out$,
		...json_indent$, .closing$, n$)
endproc

# Start a JSON list
procedure startJsonList (.out$, .name$)
	appendFile(.out$,
		...json_indent$, """", .name$, """:", n$,
		...json_indent$, "[", n$)
	@setJsonIndent(json_indent_level+1)
	json_indent$ = setJsonIndent.indent$
endproc

# End a JSON list
procedure endJsonList (.out$, .last)
	.closing$ = if .last then "]" else "]," fi
	@setJsonIndent(json_indent_level-1)
	json_indent$ = setJsonIndent.indent$
	appendFile(.out$,
		...json_indent$, .closing$, n$)
endproc

# Set indent level
procedure setJsonIndent (.n)
	json_indent_level = .n
	.indent$ = ""
	if format$ != "Minified"
		for .i to .n
			.indent$ = .indent$ + tab$
		endfor
	endif
endproc

# Sanitise string for JSON output
procedure sanitizeJsonString (.str$)
	.str$ = replace$(.str$, """", "\""", 0)
endproc